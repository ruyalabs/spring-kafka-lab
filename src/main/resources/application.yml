spring:
  kafka:
    bootstrap-servers: localhost:29092,localhost:29093,localhost:29094
    consumer:
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.json.trusted.packages: "ch.ruyalabs.springkafkalab.dto"
        spring.json.value.default.type: "ch.ruyalabs.springkafkalab.dto.PaymentDto"
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
  jackson:
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false
  application:
    name: spring-kafka-lab


app:
  kafka:
    topics:
      payment-request: payment-request
      payment-response: payment-response
      partitions: 3
      replication-factor: 3
    consumer:
      payment-request:
        group-id: payment-request-consumer-group
        trusted-packages: "ch.ruyalabs.springkafkalab.dto"
        auto-offset-reset: "earliest"
        enable-auto-commit: false
    producer:
      acks: "all"
      retries: 3
      enable-idempotence: true
      transactional-id: "payment-response-producer"
    error-handler:
      retry:
        initial-interval: 200         # Fast initial retry
        multiplier: 2.0              # Moderate backoff growth
        max-interval: 2000           # Cap at 2 seconds per retry
        max-elapsed-time: 10000      # 10 seconds total as requested

  simulation:
    balance-check:
      simulate-insufficient-balance: false
      simulate-account-not-found: false
      simulate-service-unavailable: true
    payment-execution:
      simulate-payment-processing-exception: false
      simulate-invalid-payment-method-exception: false
      simulate-gateway-timeout-exception: false
